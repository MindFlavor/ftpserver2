{"name":"Azure storage FTP Secure server","tagline":"Go FTP Secure server with support for local file system and Microsoft Azure Blob storage","body":"# Go FTP Secure server with support for local file system and Microsoft Azure Blob storage\r\n\r\n[![Build Status](https://drone.io/github.com/MindFlavor/ftpserver2/status.png)](https://drone.io/github.com/MindFlavor/ftpserver2/latest)\r\n\r\n[![Coverage Status](https://coveralls.io/repos/MindFlavor/ftpserver2/badge.svg?branch=master&service=github)](https://coveralls.io/github/MindFlavor/ftpserver2?branch=master)\r\n\r\n### A pure go FTP Secure server with support for local file system and [Microsoft Azure Blob storage](https://azure.microsoft.com/en-us/documentation/services/storage/).\r\n\r\n\r\n\r\nThe interface based file system makes easy to support different file systems. Please tell me if you are interested in something not covered here.\r\n\r\n## Features\r\nThis server implements most - not all - the FTP commands available. This should be enough for most *passive* clients, below you will find a tested program list.\r\n\r\nThe main features are:\r\n* Local file system support (ie standard FTP)\r\n* Azure blob storage backed file system\r\n* Unsecure (plain) FTP\r\n* FTP Secure explicit\r\n* FTP Secure implicit\r\n* File system agnostic\r\n* Pluggable logging system (thanks to [logrus](https://github.com/Sirupsen/logrus))\r\n\r\n### Implemented commands\r\n\r\n*\tUSER\r\n*\tPASS\r\n*\tPWD\r\n*\tTYPE\r\n*\tPASV\r\n*\tEPSV\r\n*\tLIST\r\n*\tSYST\r\n*\tCWD\r\n*\tCDUP\r\n*\tSIZE\r\n*\tRETR\r\n*\tSTOR\r\n*\tDELE\r\n*\tFEAT\r\n*\tQUIT\r\n*\tNOOP\r\n*\tMKD\r\n*\tRMD\r\n*\tREST\r\n*\tAUTH\r\n*\tPROT\r\n\r\nThis list may not be updated: please refer to [session.go](ftp/session/session.go) source file to the updated list.\r\n\r\n\r\n## How to use\r\nThe main FTP server object can be called on its own in your project. Here, however, I give you a very simple program to test it. In order to use it download it, compile it and launch it (here we assume you have a folder called ```ftphome``` in your ```C:\\``` disk):\r\n\r\n```\r\ngo get -u github.com/mindflavor/ftpserver2\r\ngo install github.com/mindflavor/ftpserver2\r\n\r\n%GOPATH%\\bin\\ftpserver2 -lfs C:\\ftphome\r\n```\r\nIf you are in linux replace the last line with\r\n\r\n```\r\nsudo $GOPATH%/bin/ftpserver2 -lfs /mnt/ftphome\r\n```\r\n\r\nYou need to be *su* in order to listen on port 21 (standard FTP command port). If you use another port you can start the program without *sudo*. Check the parameters section for how to do it.\r\n\r\n### Azure blob storage\r\nIn order to have the FTP server serve the azure storage blobs simply replace the ```-lfs``` parameter with ```-ak``` and ```-an``` like this:\r\n\r\n```\r\n$GOPATH%/bin/ftpserver2 -ak <mystorageaccount> -as <shared_key_primary_or_secondary>\r\n```\r\n\r\n## Some screenshots\r\n\r\nThis is an example of execution in ubuntu:\r\n\r\n![](http://i.imgur.com/NDupZcK.jpg)\r\n\r\nAs you can see here, TLS is available (it's up to you to use valid certs however):\r\n\r\n![](http://i.imgur.com/Iv7d85S.jpg)\r\n\r\nHere is how an Azure storage account appears in Chrome:\r\n\r\n![](http://i.imgur.com/2cWdtM1.jpg)\r\n\r\n## Parameters\r\nAt any time you can call the executable with ```-help``` flag in order to be reminded of the parameters.\r\n\r\n|Flag|Type|Description|Default|\r\n|---|---|---|---|\r\n|```an```| string |        Azure blob storage account name (*¢*)|```nil```|\r\n|```ak```|string|Azure blob storage account key (either primary or secondary) (*¢*)|```nil```|\r\n|```crt```| string|        TLS certificate file (*¢¢*)|```nil```|\r\n|```key```| string|        TLS certificate key file (*¢¢*)|```nil```|\r\n|```lDebug```| string|        Debug level log file|```nil```|\r\n|```lError```| string|        Error level log file|```nil```|\r\n|```lInfo```| string|        Info level log file|```nil```|\r\n|```lWarn```| string|        Warn level log file|```nil```|\r\n|```lfs```| string|        Local file system root (*¢¢¢*)|```nil```|\r\n|```ll```| string|        Minimum log level. Available values are ```Debug```, ```Info```, ```Warn```, ```Error``` |```Info```\r\n|```maxPasvPort```| int|        Higher passive port range |50100\r\n|```minPasvPort```| int|        Lower passive port range |50000\r\n|```plainPort```| int|        Plain FTP port (unencrypted). If you specify a TLS certificate and key encryption you can pass -1 to start a SFTP implicit server only |21\r\n|```tlsPort```| int|        Encrypted FTP port. If you do not specify a TLS certificate this port is ignored. If you specify -1 the implicit SFTP is disabled |990\r\n\r\n#### Notes\r\n\r\n(*¢*) These two flags must be specified together. If you need to retrieve the storage account key look here [http://stackoverflow.com/questions/6985921/where-can-i-find-my-azure-account-name-and-account-key](http://stackoverflow.com/questions/6985921/where-can-i-find-my-azure-account-name-and-account-key). You cannot both specify this flags and the local file system one (```lfs```).\r\n(*¢¢*) These two flags must be specified together. Without either one the secure extensions of FTP will be disabled. This article ([http://stackoverflow.com/questions/12871565/how-to-create-pem-files-for-https-web-server](http://stackoverflow.com/questions/12871565/how-to-create-pem-files-for-https-web-server)) explains how to generate both the certificate file and the key one.\r\n(*¢¢¢*) You cannot both specify this flag and the azure storage ones (```an``` and ```ak```).\r\n\r\n\r\n## ToDo\r\n\r\n* Better tests. Coverage is abysmal. Script unit testing for a distributed state machine such as FTP is a PITA though.\r\n* File access privilege check (right now is ignored).\r\n* Authentication. Right now the FTPServer delegates authentication to the caller but the provided executable does not validate the passed identity.\r\n\r\n## Tested clients  \r\n\r\n#### PC\r\n* [FileZilla](https://filezilla-project.org/).\r\n* [Chome](https://www.google.com/chrome/browser/desktop/).\r\n* [Firefox](https://www.mozilla.org/en-US/firefox/new/#).\r\n* [Internet Explorer](http://windows.microsoft.com/en-us/internet-explorer/download-ie).\r\n\r\n#### Android\r\n* [ES File Explorer File Manager](https://play.google.com/store/apps/details?id=com.estrongs.android.pop)\r\n* [Turbo FTP client & SFTP client](https://play.google.com/store/apps/details?id=turbo.client)\r\n* [FTP Client](https://play.google.com/store/apps/details?id=my.mobi.android.apps4u.ftpclient)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}